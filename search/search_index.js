var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"webscan Documentation","text":"<p>Hello and welcome to the webscan documentation. While we always want to provide the most comprehensive documentation possible, we thought you may find the below sections a helpful place to get started.</p> <ul> <li>The Getting Started section provides onboarding material</li> <li>The Development header is the best place to get started on developing on top of and with webscan</li> <li>See the Docs section for a comprehensive rundown of webscan capabilities</li> </ul>"},{"location":"index.html#about-webscan","title":"About webscan","text":"<p>webscan is designed as a simple, easy to use web application scanning tool that security teams can use to automate the collection of data about their web applications. Designed with data-modeling and data-integration needs in mind, webscan can be used on its own as an interactive CLI, orchestrated as part of a broader data pipeline, or leveraged from within the Method Platform.</p> <p>The types of scans that webscan can conduct are constantly growing. For the most up to date listing, please see the documentation here</p> <p>To learn more about webscan, please see the Documentation site for the most detailed information.</p>"},{"location":"index.html#quick-start","title":"Quick Start","text":""},{"location":"index.html#get-webscan","title":"Get webscan","text":"<p>For the full list of available installation options, please see the Installation page. For convenience, here are some of the most commonly used options:</p> <ul> <li><code>docker run methodsecurity/webscan</code></li> <li><code>docker run ghcr.io/method-security/webscan</code></li> <li>Download the latest binary from the Github Releases page</li> <li>Installation documentation</li> </ul>"},{"location":"index.html#examples","title":"Examples","text":"<pre><code>webscan spider --targets https://example.com,https://example.dev\n</code></pre> <pre><code>webscan vuln --severity INFO --tags swagger --tags fastapi --tags api --target example.com\n</code></pre>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>Interested in contributing to webscan? Please see our organization wide Contribution page.</p>"},{"location":"index.html#want-more","title":"Want More?","text":"<p>If you're looking for an easy way to tie webscan into your broader cybersecurity workflows, or want to leverage some autonomy to improve your overall security posture, you'll love the broader Method Platform.</p> <p>For more information, visit us here</p>"},{"location":"index.html#community","title":"Community","text":"<p>webscan is a Method Security open source project.</p> <p>Learn more about Method's open source source work by checking out our other projects here or our organization wide documentation here.</p> <p>Have an idea for a Tool to contribute? Open a Discussion here.</p>"},{"location":"community/community.html","title":"Contributing","text":"<p>For more information on how to get involved in the Method community, please see our organization wide documentation:</p> <ul> <li>Discussions</li> <li>Issues</li> <li>Pull Requests</li> </ul>"},{"location":"development/adding.html","title":"Adding a new capability","text":"<p>By design, webscan breaks every unique network scan into its own top level command. If you are looking to add a brand new capability to the tool, you can take the following steps.</p> <ol> <li>Add a file to <code>cmd/</code> that corresponds to the sub-command name you'd like to add to the <code>webscan</code> CLI</li> <li>You can use <code>cmd/fuzz.go</code> as a template</li> <li>Your file needs to be a member function of the <code>webscan</code> struct and should be of the form <code>Init&lt;cmd&gt;Command</code></li> <li>Add a new member to the <code>webscan</code> struct in <code>cmd/root.go</code> that corresponsds to your command name. Remember, the first letter must be capitalized.</li> <li>Call your <code>Init</code> function from <code>main.go</code></li> <li>Add logic to your commands runtime and put it in its own package within <code>internal</code> (e.g., <code>internal/fuzz</code>)</li> </ol>"},{"location":"development/principles.html","title":"Project Principles","text":""},{"location":"development/principles.html#pre-run-run-post-run","title":"Pre-run -&gt; Run -&gt; Post-run","text":"<p>In the root command, we set a <code>PersistentPreRunE</code> and <code>PersistentPostRunE</code> function that is responsible for initializing the output format and Signal data (in the pre-run) and then write that data in the proper format (in the post-run).</p> <p>Within the Run command that every command must implement, the output of the collected data needs to be written back to the struct's <code>OutputSignal.Content</code> value in order to be properly written out to the caller.</p>"},{"location":"development/principles.html#cmd-vs-internal","title":"Cmd vs Internal","text":"<p>By design, the functionality within each command should focus around parsing the variety of flags and options that the command may need to control capability, passing off all real logic into internal modules.</p>"},{"location":"development/setup.html","title":"Development Setup","text":""},{"location":"development/setup.html#adding-a-new-capability","title":"Adding a new capability","text":"<p>To add a new scan to webscan, providing new enumeration capabilities to security operators everywhere, please see the adding a new capability page.</p>"},{"location":"development/setup.html#setting-up-your-development-environment","title":"Setting up your development environment","text":"<p>If you've just cloned webscan for the first time, welcome to the community! We use Palantir's godel to streamline local development and goreleaser to handle the heavy lifting on the release process.</p> <p>To get started with godel, you can run</p> <pre><code>./godelw verify\n</code></pre> <p>This will run a number of checks for us, including linters, tests, and license checks. We run this command as part of our CI pipeline to ensure the codebase is consistently passing tests.</p>"},{"location":"development/setup.html#building-the-cli","title":"Building the CLI","text":"<p>We can use godel to build our CLI locally by running</p> <pre><code>./godelw build\n</code></pre> <p>You should see output in <code>out/build/webscan/&lt;version&gt;/&lt;os&gt;-&lt;arch&gt;/webscan</code>.</p> <p>If you'd like to clean this output up, you can run</p> <pre><code>./godelw clean\n</code></pre>"},{"location":"development/setup.html#testing-releases-locally","title":"Testing releases locally","text":"<p>We can use goreleaser locally as well to test our builds. As webscan uses cosign to sign our artifacts and Docker containers during our CI pipeline, we'll want to skip this step when running locally.</p> <pre><code>goreleaser release --snapshot --clean --skip sign\n</code></pre> <p>This should output binaries, distributable tarballs/zips, as well as docker images to your local machine's Docker registry.</p>"},{"location":"docs/index.html","title":"Capabilities","text":"<p>webscan offers a variety of scanning techniques to security teams working to gain a better handle on what web applications they have deployed across cloud providers and on-premise environments. Each of the below pages offers you an in depth look at a webscan capability related to a unique scanning technique.</p> <ul> <li>Fuzz</li> <li>Probe</li> <li>Spider</li> <li>Vuln</li> <li>Fingerprint</li> <li>Pagecapture</li> <li>Routecapture</li> </ul>"},{"location":"docs/index.html#top-level-flags","title":"Top Level Flags","text":"<p>webscan has several top level flags that can be used on any subcommand. These include:</p> <pre><code>Flags:\n  -h, --help                 help for webscan\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/index.html#version-command","title":"Version Command","text":"<p>Run <code>webscan version</code> to get the exact version information for your binary</p>"},{"location":"docs/index.html#output-formats","title":"Output Formats","text":"<p>For more information on the various output formats that are supported by webscan, see the Output Formats page in our organization wide documentation.</p>"},{"location":"docs/app.html","title":"App","text":"<p>The <code>webscan app</code> command performs various application scans such as fingerprinting and enumeration.</p>"},{"location":"docs/app.html#usage","title":"Usage","text":"<pre><code>webscan app [command]\n</code></pre>"},{"location":"docs/app.html#commands","title":"Commands","text":""},{"location":"docs/app.html#fingerprint","title":"Fingerprint","text":"<p>The <code>webscan app fingerprint</code> command fingerprints a URL by identifying the web application type.</p> <p>Fingerprint uses Nuclei as the means for identifying an application type. For example, <code>--tags swagger</code> finds an active Swagger API. <code>--tags bucket</code> finds AWS S3 buckets of Azure Blob Storage Containers.</p>"},{"location":"docs/app.html#usage_1","title":"Usage","text":"<pre><code>webscan app fingerprint --target https://example.com --tags swagger --severity INFO --defaultTemplateDirectory /path/to/default/templates --customTemplateDirectory /path/to/custom/templates\n</code></pre>"},{"location":"docs/app.html#help-text","title":"Help Text","text":"<pre><code>webscan app fingerprint -h\n\nPerform a fingerprint scan against a target\n\nUsage:\nwebscan app fingerprint [flags]\n\nFlags:\n-h, --help help for fingerprint\n--target string URL target to perform fingerprinting against\n--tags strings Tags to filter templates by (default [swagger,k8s,graphql,grpc])\n--severity strings Severity to filter templates by\n--defaultTemplateDirectory Directory to load default templates from\n--customTemplateDirectory Directory to load custom templates from\n\nGlobal Flags:\n-o, --output string Output format (signal, json, yaml). Default value is signal (default \"signal\")\n-f, --output-file string Path to output file. If blank, will output to STDOUT\n-q, --quiet Suppress output\n-v, --verbose Verbose output\n</code></pre>"},{"location":"docs/app.html#enumerate","title":"Enumerate","text":"<p>The <code>webscan app enumerate</code> command details the routes for an API application.</p>"},{"location":"docs/app.html#usage_2","title":"Usage","text":"<pre><code>webscan app enumerate [command]\n</code></pre>"},{"location":"docs/app.html#commands_1","title":"Commands","text":""},{"location":"docs/app.html#swagger","title":"Swagger","text":"<p>The <code>webscan app enumerate swagger</code> command performs a Swagger enumeration scan against a target.</p>"},{"location":"docs/app.html#usage_3","title":"Usage","text":"<pre><code>webscan app enumerate swagger --target https://example.com --no-sandbox\n</code></pre>"},{"location":"docs/app.html#help-text_1","title":"Help Text","text":"<pre><code>webscan app enumerate swagger -h\nPerform a Swagger enumeration scan against a target\nUsage:\nwebscan app enumerate swagger [flags]\nFlags:\n-h, --help help for swagger\n--target string URL target to perform Swagger enumeration against\n--no-sandbox Disable sandbox mode for Swagger scan. Boolean flag, default false. \nGlobal Flags:\n-o, --output string Output format (signal, json, yaml). Default value is signal (default \"signal\")\n-f, --output-file string Path to output file. If blank, will output to STDOUT\n-q, --quiet Suppress output\n-v, --verbose Verbose output\n</code></pre>"},{"location":"docs/app.html#grpc","title":"gRPC","text":"<p>The <code>webscan app enumerate grpc</code> command performs a gRPC enumeration scan against a target.</p>"},{"location":"docs/app.html#usage_4","title":"Usage","text":"<pre><code>webscan app enumerate grpc --target grpc.example.com:443\n</code></pre>"},{"location":"docs/app.html#help-text_2","title":"Help Text","text":"<pre><code>webscan app enumerate grpc -h\nPerform a gRPC enumeration scan against a target\nUsage:\nwebscan app enumerate grpc [flags]\nFlags:\n-h, --help help for grpc\n--target string URL target to perform gRPC enumeration against\nGlobal Flags:\n-o, --output string Output format (signal, json, yaml). Default value is signal (default \"signal\")\n-f, --output-file string Path to output file. If blank, will output to STDOUT\n-q, --quiet Suppress output\n-v, --verbose Verbose output\n</code></pre>"},{"location":"docs/app.html#graphql","title":"GraphQL","text":"<p>The <code>webscan app enumerate graphql</code> command performs a GraphQL enumeration scan against a target.</p>"},{"location":"docs/app.html#usage_5","title":"Usage","text":"<pre><code>webscan app enumerate graphql --target https://example.com\n</code></pre>"},{"location":"docs/app.html#help-text_3","title":"Help Text","text":"<pre><code>webscan app enumerate graphql -h\nPerform a GraphQL enumeration scan against a target\nUsage:\nwebscan app enumerate graphql [flags]\nFlags:\n-h, --help help for graphql\n--target string URL target to perform GraphQL enumeration against\nGlobal Flags:\n-o, --output string Output format (signal, json, yaml). Default value is signal (default \"signal\")\n-f, --output-file string Path to output file. If blank, will output to STDOUT\n-q, --quiet Suppress output\n-v, --verbose Verbose output\n</code></pre>"},{"location":"docs/fingerprint.html","title":"Spider","text":"<p>The <code>webscan fingerprint</code> command fingerprints a URL by collecting its HTTP Options, TLS Config, and Certificates.</p>"},{"location":"docs/fingerprint.html#usage","title":"Usage","text":"<pre><code>webscan fingerprint --targets https://example.com\n</code></pre>"},{"location":"docs/fingerprint.html#help-text","title":"Help Text","text":"<pre><code>webscan fingerprint -h\nPerform a fingerprint against a URL target\n\nUsage:\n  webscan fingerprint [flags]\n\nFlags:\n  -h, --help            help for fingerprint\n      --target string   Url target to perform fingerprint\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/fuzz.html","title":"Fuzz","text":"<p>The <code>webscan fuzz</code> family of commands conduct basic fuzzing techniques to discover URLs and endpoints that may not be advertised.</p>"},{"location":"docs/fuzz.html#path","title":"Path","text":""},{"location":"docs/fuzz.html#usage","title":"Usage","text":"<pre><code>webscan fuzz path --maxtime 100 --pathlist paths.txt --target https://example.com\n</code></pre>"},{"location":"docs/fuzz.html#help-text","title":"Help Text","text":"<pre><code>$ webscan fuzz path -h\nPerform a path based web fuzz against a target\n\nUsage:\n  webscan fuzz path [flags]\n\nFlags:\n  -h, --help                   help for path\n      --maxtime int            The maximum time in seconds to run the job, default to 300 seconds (default 300)\n      --pathlist string        Newline separated list of paths to fuzz\n      --responsecodes string   Response codes to consider as valid responses (default \"200-299,401,403\")\n      --target string          URL target to perform path fuzzing against\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/pagecapture.html","title":"Pagecapture","text":"<p>The <code>webscan pagecapture</code> command collects the HTML or screenshots from a specified URL target.</p>"},{"location":"docs/pagecapture.html#usage","title":"Usage","text":"<pre><code>webscan pagecapture [command]\n</code></pre>"},{"location":"docs/pagecapture.html#commmands","title":"Commmands","text":""},{"location":"docs/pagecapture.html#html-request","title":"HTML Request","text":""},{"location":"docs/pagecapture.html#usage_1","title":"Usage","text":"<pre><code>webscan pagecapture html request --target https://example.com\n</code></pre>"},{"location":"docs/pagecapture.html#help-text","title":"Help Text","text":"<pre><code>Perform a webpage HTML capture using a basic HTTP/HTTPS request\n\nUsage:\n  webscan pagecapture html request [flags]\n\nFlags:\n  -h, --help       help for request\n      --insecure   Allow insecure connections\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --target string        URL target to perform webpage capture\n      --timeout int          Timeout in seconds for the capture (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/pagecapture.html#html-browser","title":"HTML Browser","text":""},{"location":"docs/pagecapture.html#usage_2","title":"Usage","text":"<pre><code>webscan pagecapture html browser --target https://example.com\n</code></pre>"},{"location":"docs/pagecapture.html#help-text_1","title":"Help Text","text":"<pre><code>Perform a fully rendered webpage HTML capture using a headless browser\n\nUsage:\n  webscan pagecapture html browser [flags]\n\nFlags:\n  -h, --help   help for browser\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --target string        URL target to perform webpage capture\n      --timeout int          Timeout in seconds for the capture (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/pagecapture.html#html-browserbase","title":"HTML Browserbase","text":""},{"location":"docs/pagecapture.html#usage_3","title":"Usage","text":"<pre><code>webscan pagecapture html browserbase --target https://example.com\n</code></pre>"},{"location":"docs/pagecapture.html#help-text_2","title":"Help Text","text":"<pre><code>Perform a fully rendered webpage HTML capture using Browserbase. Useful for avoiding bot detection or maintaining stealth\n\nUsage:\n  webscan pagecapture html browserbase [flags]\n\nFlags:\n      --country stringArray   List of countries to use for the proxy\n  -h, --help                  help for browserbase\n      --project string        Browserbase project ID\n      --proxy                 Instruct Browserbase to use a proxy\n      --token string          Browserbase API token\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --target string        URL target to perform webpage capture\n      --timeout int          Timeout in seconds for the capture (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/pagecapture.html#screenshot-browser","title":"Screenshot Browser","text":""},{"location":"docs/pagecapture.html#usage_4","title":"Usage","text":"<pre><code>webscan pagecapture screenshot browser --target https://example.com\n</code></pre>"},{"location":"docs/pagecapture.html#help-text_3","title":"Help Text","text":"<pre><code>Perform a fully rendered webpage screenshot and HTML capture using a headless browser\n\nUsage:\n  webscan pagecapture screenshot browser [flags]\n\nFlags:\n      --browserPath string   Path to a browser executable\n  -h, --help                 help for browser\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --target string        URL target to perform webpage capture\n      --timeout int          Timeout in seconds for the capture (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/pagecapture.html#screenshot-browserbase","title":"Screenshot Browserbase","text":""},{"location":"docs/pagecapture.html#usage_5","title":"Usage","text":"<pre><code>webscan pagecapture screenshot browser --target https://example.com\n</code></pre>"},{"location":"docs/pagecapture.html#help-text_4","title":"Help Text","text":"<pre><code>Perform a fully rendered webpage screenshot and HTML capture using Browserbase. Useful for avoiding bot detection or maintaining stealth\n\nUsage:\n  webscan pagecapture screenshot browserbase [flags]\n\nFlags:\n      --country stringArray   List of countries to use for the proxy\n  -h, --help                  help for browserbase\n      --project string        Browserbase project ID\n      --proxy                 Instruct Browserbase to use a proxy\n      --token string          Browserbase API token\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --target string        URL target to perform webpage capture\n      --timeout int          Timeout in seconds for the capture (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/probe.html","title":"Probe","text":"<p>The <code>webscan probe</code> family of commands provides techniques to probe various types of web services looking for misconfigurations, vulnerabilities, and exposed information that is useful to security teams.</p>"},{"location":"docs/probe.html#webserver","title":"Webserver","text":""},{"location":"docs/probe.html#usage","title":"Usage","text":"<pre><code>webscan probe webserver --targets https://example.com,https://anotherexample.dev\n</code></pre>"},{"location":"docs/probe.html#help-text","title":"Help Text","text":"<pre><code>webscan probe webserver -h\nPerform a web probe against targets to identify existence of web servers\n\nUsage:\n  webscan probe webserver [flags]\n\nFlags:\n  -h, --help             help for webserver\n      --targets string   Address targets to perform webserver probing agains, comma delimited list\n      --timeout int      Timeout limit in seconds\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/routecapture.html","title":"Routecapture","text":"<p>The <code>webscan routecapture</code> command all web routes and URLs from a specified target. It uses the same underlying techniques that <code>pagecapture</code> uses to render HTML.</p> <p>Routes are extracted from the rendered HTML, inline scripts, linked scripts, and inspecting network requests made (when using Browser mode).</p>"},{"location":"docs/routecapture.html#usage","title":"Usage","text":"<pre><code>webscan pagecapture [command]\n</code></pre>"},{"location":"docs/routecapture.html#commmands","title":"Commmands","text":""},{"location":"docs/routecapture.html#request","title":"Request","text":""},{"location":"docs/routecapture.html#usage_1","title":"Usage","text":"<pre><code>webscan routecapture request --target https://example.com\n</code></pre>"},{"location":"docs/routecapture.html#help-text","title":"Help Text","text":"<pre><code>Perform a webpage route capture using a basic HTTP/HTTPS request\n\nUsage:\n  webscan routecapture request [flags]\n\nFlags:\n  -h, --help       help for request\n      --insecure   Allow insecure connections\n\nGlobal Flags:\n      --base-urls-only       Only match routes and urls that share the base URLs domain (default true)\n      --browserPath string   Path to a browser executable\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --target string        URL target to perform webpage capture\n      --timeout int          Timeout in seconds for the capture (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/routecapture.html#browser","title":"Browser","text":""},{"location":"docs/routecapture.html#usage_2","title":"Usage","text":"<pre><code>webscan routecapture browser --target https://example.com\n</code></pre>"},{"location":"docs/routecapture.html#help-text_1","title":"Help Text","text":"<pre><code>Perform a webpage route capture using a headless browser\n\nUsage:\n  webscan routecapture browser [flags]\n\nFlags:\n      --browserPath string   Path to a browser executable\n  -h, --help                 help for browser\n\nGlobal Flags:\n      --base-urls-only       Only match routes and urls that share the base URLs domain (default true)\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --target string        URL target to perform webpage capture\n      --timeout int          Timeout in seconds for the capture (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/routecapture.html#browserbase","title":"Browserbase","text":""},{"location":"docs/routecapture.html#usage_3","title":"Usage","text":"<pre><code>webscan routecapture browserbase --project abc-123 --token xyz-789 --target https://example.com\n</code></pre>"},{"location":"docs/routecapture.html#help-text_2","title":"Help Text","text":"<pre><code>Perform a fully rendered webpage route capture using Browserbase. Useful for avoiding bot detection or maintaining stealth\n\nUsage:\n  webscan routecapture browserbase [flags]\n\nFlags:\n      --country stringArray   List of countries to use for the proxy\n  -h, --help                  help for browserbase\n      --project string        Browserbase project ID\n      --proxy                 Instruct Browserbase to use a proxy\n      --token string          Browserbase API token\n\nGlobal Flags:\n      --base-urls-only       Only match routes and urls that share the base URLs domain (default true)\n      --browserPath string   Path to a browser executable\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --target string        URL target to perform webpage capture\n      --timeout int          Timeout in seconds for the capture (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/spider.html","title":"Spider","text":"<p>The <code>webscan spider</code> command crawls the provided targets, capturing data about URLs hosted and the provided addresses.</p>"},{"location":"docs/spider.html#usage","title":"Usage","text":"<pre><code>webscan spider --targets https://example.com\n</code></pre>"},{"location":"docs/spider.html#help-text","title":"Help Text","text":"<pre><code>webscan spider -h\nPerform a web spider crawl against URL targets\n\nUsage:\n  webscan spider [flags]\n\nFlags:\n  -h, --help             help for spider\n      --targets string   Url targets to perform web spidering, comma delimited list\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/vuln.html","title":"Vuln","text":"<p>The <code>webscan vuln</code> command leverages Project Discovery's nuclei capability to perform vulnerability scans against the provided target.</p>"},{"location":"docs/vuln.html#usage","title":"Usage","text":"<pre><code>webscan vuln --defaultTemplateDirectory /opt/nuclei/templates --severity CRITICAL --target https://example.com\n</code></pre>"},{"location":"docs/vuln.html#help-text","title":"Help Text","text":"<pre><code>webscan vuln -h\nPerform a vulnerability scan against a target using nuclei\n\nUsage:\n  webscan vuln [flags]\n\nFlags:\n      --customTemplateDirectory string    Directory to load custom templates from\n      --defaultTemplateDirectory string   Directory to load default templates from\n  -h, --help                              help for vuln\n      --severity strings                  Severity to filter templates by\n      --tags strings                      Tags to filter templates by\n      --target string                     URL target to perform path fuzzing against\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"getting-started/basic-usage.html","title":"Basic Usage","text":""},{"location":"getting-started/basic-usage.html#binaries","title":"Binaries","text":"<p>Running as a binary allows you to skip dealing with any container related networking issues and leverage the same network interface that the host machine is using.</p> <p>You can validate that the binary is working by scanning the publicly available <code>scanme.sh</code>.</p> <pre><code>webscan probe webserver --targets scanme.sh\n</code></pre>"},{"location":"getting-started/basic-usage.html#docker","title":"Docker","text":"<p>Running webscan within a Docker container should typically work similarly to running directly on a host, however, occasionally there are a few things to keep in mind.</p> <p>If you're running on a Docker container on a MacOS machine and you are trying to scan a locally running service, you can leverage the <code>host.docker.internal</code> address as mentioned in the Docker documentation here.</p> <pre><code>docker run ghcr.io/method-security/webscan \\\n  probe webserver \\\n  --targets scanme.sh\n</code></pre>"},{"location":"getting-started/installation.html","title":"Getting Started","text":"<p>If you are just getting started with webscan, welcome! This guide will walk you through the process of going zero to one with the tool.</p>"},{"location":"getting-started/installation.html#installation","title":"Installation","text":"<p>webscan is provided in several convenient form factors, including statically compiled binary images on a variety of architectures as well as a Docker image for both x86 and ARM machines.</p> <p>If you do not see an architecture that you require, please open a Discussion to propose adding it.</p>"},{"location":"getting-started/installation.html#binaries","title":"Binaries","text":"<p>webscan currently supports statically compiled binaries across the following operating systems and architectures:</p> OS Architecture Linux amd64 Linux arm64 MacOS arm64 Windows amd64 <p>The latest binaries can be downloaded directly from Github.</p>"},{"location":"getting-started/installation.html#docker","title":"Docker","text":"<p>Docker images for webscan are hosted in both Github Container Registry as well as on Docker Hub and can be pulled via:</p> <pre><code>docker pull ghcr.io/method-security/webscan\n</code></pre> <pre><code>docker pull methodsecurity/webscan\n</code></pre>"}]}
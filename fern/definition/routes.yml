imports:
  graphql: ./graphql.yml
types:
  SecuritySchemeName: string
  SecuritySchemeType:
    enum:
      - basic
      - apiKey
      - http
      - oauth2
      - openIdConnect
      - mutualTLS
  SecurityScheme:
    properties:
      type: SecuritySchemeType
      description: optional<string>
      name: optional<SecuritySchemeName>
      in: optional<string>
      scheme: optional<string>
      bearerFormat: optional<string>
      flow: optional<string> # oauth v2
      authorizationUrl: optional<string> # oauth v2
      tokenUrl: optional<string> # oauth v2
      scopes: optional<map<string, string>>
      flows: optional<OAuthFlows> # oauth v3
      openIdConnectUrl: optional<string>
  OAuthFlows:
    properties:
      implicit: optional<OAuthFlow>
      password: optional<OAuthFlow>
      clientCredentials: optional<OAuthFlow>
      authorizationCode: optional<OAuthFlow>
  OAuthFlow:
    properties:
      authorizationUrl: optional<string>
      tokenUrl: optional<string>
      refreshUrl: optional<string>
      scopes: optional<map<string, string>>
  SecurityRequirement:
    properties:
      schemes: map<string, optional<list<string>>>

  SchemaProperty:
    properties:
      name: string
      type: list<string>
      format: optional<string>
      description: optional<string>
      required: optional<boolean>
      items: optional<RequestSchema>
      properties: optional<list<SchemaProperty>>
      additionalProperties: optional<RequestSchema>
      enum: optional<list<string>>
      example: optional<string>

  RequestSchema:
    properties:
      type: list<string>
      properties: optional<list<SchemaProperty>>
      required: optional<list<string>>
      items: optional<RequestSchema>
      additionalProperties: optional<RequestSchema>
      allOf: optional<list<RequestSchema>>
      oneOf: optional<list<RequestSchema>>
      anyOf: optional<list<RequestSchema>>
      not: optional<RequestSchema>
      description: optional<string>
      format: optional<string>
      default: optional<string>
      example: optional<unknown>
      enum: optional<list<unknown>>
      multipleOf: optional<double>
      maximum: optional<double>
      exclusiveMaximum: optional<boolean>
      minimum: optional<double>
      exclusiveMinimum: optional<boolean>
      maxLength: optional<integer>
      minLength: optional<integer>
      pattern: optional<string>
      maxItems: optional<integer>
      minItems: optional<integer>
      uniqueItems: optional<boolean>
      maxProperties: optional<integer>
      minProperties: optional<integer>

  Route:
    properties:
      path: string
      queryParams: optional<list<string>>
      security: optional<SecurityRequirement>
      method: string
      type: APIType
      description: string
      responseProperties: optional<map<string, list<string>>>
      requestSchema: optional<RequestSchema>

  RoutesReport:
    properties:
      target: string
      appType: APIType
      baseEndpointUrl: string
      version: optional<string>
      schemaUrl: optional<string>
      routes: optional<list<Route>>
      securitySchemes: optional<map<SecuritySchemeName, SecurityScheme>>
      security: optional<list<SecurityRequirement>>
      queries: optional<list<graphql.GraphQLQuery>>
      raw: string
      errors: optional<list<string>>

  APIType:
    enum:
      - Grpc
      - GraphQL
      - SwaggerV2
      - SwaggerV3